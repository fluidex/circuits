include "./lib/bitify.circom";
include "./lib/hash_state.circom";
include "./lib/binary_merkle_tree.circom";

/**
 * Process a deposit_and_create_account transaction, also support create 0 balance account
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input amount - {Uint192} - amount to deposit from L1 to L2
 */
template DepositToNew(balanceLevels, accountLevels) {
    signal input enabled;
    signal input enableBalanceCheck1;
    signal input enableBalanceCheck2;

    signal input dstIsOld;
    signal dstIsEmpty;

    // should only be calculated from the main circuit itself
    signal input genesisOrderRoot;

    // check old account is empty
    signal input orderRoot1;
    signal input orderRoot2;

    signal input balance1;
    signal input nonce1;
    signal input sign1;
    signal input ay1;
    signal input ethAddr1;

    signal input balance2;
    signal input nonce2;
    signal input sign2;
    signal input ay2;
    signal input ethAddr2;

    signal input amount;

    component not = NOT();
    not.in <== dstIsOld;
    not.out ==> dstIsEmpty;

    component depositToNewCheck = AND();
    depositToNewCheck.a <== enabled;
    depositToNewCheck.b <== dstIsEmpty;
    component depositToOldCheck = AND();
    depositToOldCheck.a <== enabled;
    depositToOldCheck.b <== dstIsOld;

    // universal checker
    <%- codegen.generateMultiCheckEq([
        ['enableBalanceCheck1', '1'],
        ['enableBalanceCheck2', '1'],
        ['balance2', 'balance1 + amount'],
        // deposit will not update nonce and orderRoot
        ['nonce1', 'nonce2'],
        ['orderRoot1', 'orderRoot2'],
    ], {ctx: 'CheckUniversal', replacers: {enabled: 'enabled'}}) %>

    // check state when old state is empty
    <%- codegen.generateMultiCheckEq([
        ['balance1', '0'],
        ['nonce1', '0'],
        ['ay1', '0'],
        ['sign1', '0'],
        ['ethAddr1', '0'],
        ['orderRoot1', 'genesisOrderRoot'],
    ], {ctx: 'CheckWhenEmpty', replacers: {enabled: 'depositToNewCheck.out'}}) %>


    // check state when old state is not empty
    <%- codegen.generateMultiCheckEq([
        ['nonce1', 'nonce2'],
        ['sign1', 'sign2'],
        ['ay1', 'ay2'],
        ['ethAddr1', 'ethAddr2'],
        ['orderRoot1', 'orderRoot2'],
    ], {ctx: 'CheckWhenNotEmpty', replacers: {enabled: 'depositToOldCheck.out'}}) %>

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee
}

/**
 * Process a deposit_and_create_account transaction, also support create 0 balance account
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input accountID - {Uint48} - auxiliary index to create accounts
 * @input tokenID - {Uint32} - tokenID signed in the transaction
 * @input ethAddr - {Uint160} - L1 sender ethereum address
 * @input sign - {Bool} - bjj sign of the account leaf
 * @input ay - {Field} - bjj ay of the account leaf
 * @input amount - {Uint192} - amount to deposit from L1 to L2
 * @input balance_path_elements[balanceLevels][1] - {Array(Field)} - siblings balance merkle proof of the leaf
 * @input account_path_elements[accountLevels][1] - {Array(Field)} - siblings account merkle proof of the leaf
 * @input oldAccountRoot - {Field} - initial account state root
 * @input newAccountRoot - {Field} - final account state root
 */
template DepositToNewLegacy(balanceLevels, accountLevels) {
    signal input enabled;

    // should only be calculated from the main circuit itself
    signal input genesisOrderRoot;

    // Tx
    signal input accountID;
    signal input tokenID;

    // For L1 TX
    signal input ethAddr;
    signal input sign;
    signal input ay;
    signal input amount;

    // State
    signal input balance_path_elements[balanceLevels][1];
    signal input account_path_elements[accountLevels][1];

    // Roots
    signal input oldAccountRoot;
    signal input newAccountRoot;

    // Path index
    signal balance_path_index[balanceLevels];
    signal account_path_index[accountLevels];

    // decode balance_path_index
    component bTokenID = Num2BitsIfEnabled(balanceLevels);
    bTokenID.enabled <== enabled;
    bTokenID.in <== tokenID;
    for (var i = 0; i < balanceLevels; i++) {
        balance_path_index[i] <== bTokenID.out[i];
    }

    // decode account_path_index
    component bAccountID = Num2BitsIfEnabled(accountLevels);
    bAccountID.enabled <== enabled;
    bAccountID.in <== accountID;
    for (var i = 0; i < accountLevels; i++) {
        account_path_index[i] <== bAccountID.out[i];
    }

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    // - check balance tree update
    ////////

    signal orderRoot <== genesisOrderRoot;
    signal nonce <== 0;

    <%- codegen.generateBalanceCheckCircom({ctx: 'Old', replacers: { balance: '0', accountRoot: 'oldAccountRoot', sign: '0', ay: '0', 'ethAddr': '0'}}) %>


    <%- codegen.generateBalanceCheckCircom({ctx: 'New', replacers: { balance: 'amount', accountRoot: 'newAccountRoot'}}) %>

}
