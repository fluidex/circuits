include "./lib/bitify.circom";
include "./lib/binary_merkle_tree.circom";
include "./lib/hash_state.circom";

template PlaceOrder(balanceLevels, orderLevels, accountLevels) {
    signal input enabled;

<%- codegen.renderInputDecoderCircom(codegen.config.placeOrder.inputSignals) %>

    // Roots
    signal input oldOrderRoot;
    signal input newOrderRoot;
    signal input oldAccountRoot;
    signal input newAccountRoot;

    signal input balancePathElements[balanceLevels][1];
    signal input orderPathElements[orderLevels][1];
    signal input accountPathElements[accountLevels][1];

    // Path index
    signal balancePathIndex[balanceLevels];
    signal order_path_index[orderLevels];
    signal accountPathIndex[accountLevels];

    signal tokenID <== new_order_tokensell;
    // decode balancePathIndex
    component bTokenID = Num2BitsIfEnabled(balanceLevels);
    bTokenID.enabled <== enabled;
    bTokenID.in <== tokenID;
    for (var i = 0; i < balanceLevels; i++) {
        balancePathIndex[i] <== bTokenID.out[i];
    }

    // decode order_path_index
    component bOrderID = Num2BitsIfEnabled(orderLevels);
    bOrderID.enabled <== enabled;
    bOrderID.in <== order_pos;
    for (var i = 0; i < orderLevels; i++) {
        order_path_index[i] <== bOrderID.out[i];
    }

    // decode accountPathIndex
    component bAccountID = Num2BitsIfEnabled(accountLevels);
    bAccountID.enabled <== enabled;
    bAccountID.in <== accountID;
    for (var i = 0; i < accountLevels; i++) {
        accountPathIndex[i] <== bAccountID.out[i];
    }

    // check balance. (Removed. Since we don't have frozen_balance we cannot gurantee sufficient balance -- user may transfer/withraw after place_order.)
    // component balance_ge0 = GreaterEqThan(192);
    // balance_ge0.in[0] <== balance;
    // balance_ge0.in[1] <== new_order_amountsell;
    // component balance_check = ForceEqualIfEnabled();
    // balance_check.enabled <== enabled;
    // balance_check.in[0] <== balance_ge0.out;
    // balance_check.in[1] <== 1;

    // calculate state
    component balance_tree = CalculateRootFromMerklePath(balanceLevels);
    balance_tree.leaf <== balance;
    for (var i = 0; i < balanceLevels; i++) {
        balance_tree.path_index[i] <== balancePathIndex[i];
        balance_tree.path_elements[i][0] <== balancePathElements[i][0];
    }

    // make sure new order id is greater than old order id
    // the old order is permanently disappeared for the merkle tree
    // Even the old order has not been filled already.
    // Then the old order cannot be matched any more, it is 'canceled' in fact
    // Besides, you need to make sure your order id starts from 1 rather than 0
    
    component comp = LessThan(192);
    comp.in[0] <== old_order_id;
    comp.in[1] <== new_order_id;
    (comp.out - 1) * enabled === 0;
    

    // here we don't need to check
    // ((old_order_filledsell==old_order_amountsell) || (old_order_filledbuy==old_order_amountbuy))
    // we can make sure this when updating order to "filled" in circuits

    signal balanceRoot <== balance_tree.root;

    <%- codegen.generateBalanceCheckCircom({ctx: 'Old', replacers: { order_tokensell: 'old_order_tokensell',
    order_tokenbuy: 'old_order_tokenbuy', order_filledsell: 'old_order_filledsell', order_filledbuy: 'old_order_filledbuy',
     order_amountsell: 'old_order_amountsell', order_amountbuy: 'old_order_amountbuy', order_id: 'old_order_id',
    orderRoot: 'oldOrderRoot', accountRoot: 'oldAccountRoot' }}) %>

    <%- codegen.generateBalanceCheckCircom({ctx: 'New', replacers: { order_tokensell: 'new_order_tokensell',
    order_tokenbuy: 'new_order_tokenbuy', order_filledsell: '0', order_filledbuy: '0',
     order_amountsell: 'new_order_amountsell', order_amountbuy: 'new_order_amountbuy', order_id: 'new_order_id',
    orderRoot: 'newOrderRoot', accountRoot: 'newAccountRoot' }}) %>
    
}
