
/**
 * Process a deposit_and_create_account transaction, also support create 0 balance account
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input accountID - {Uint48} - auxiliary index to create accounts
 * @input tokenID - {Uint32} - tokenID signed in the transaction
 * @input ethAddr - {Uint160} - L1 sender ethereum address
 * @input sign - {Bool} - bjj sign of the account leaf
 * @input ay - {Field} - bjj ay of the account leaf
 * @input amount - {Uint192} - amount to deposit from L1 to L2
 * @input balancePathElements[balanceLevels][1] - {Array(Field)} - siblings balance merkle proof of the leaf
 * @input accountPathElements[accountLevels][1] - {Array(Field)} - siblings account merkle proof of the leaf
 * @input oldAccountRoot - {Field} - initial account state root
 * @input newAccountRoot - {Field} - final account state root
 */
template DepositToNewLegacy(balanceLevels, accountLevels) {
    signal input enabled;

    // should only be calculated from the main circuit itself
    signal input genesisOrderRoot;

    // Tx
    signal input accountID;
    signal input tokenID;

    // For L1 TX
    signal input ethAddr;
    signal input sign;
    signal input ay;
    signal input amount;

    // State
    signal input balancePathElements[balanceLevels][1];
    signal input accountPathElements[accountLevels][1];

    // Roots
    signal input oldAccountRoot;
    signal input newAccountRoot;

    // Path index
    signal balancePathIndex[balanceLevels];
    signal accountPathIndex[accountLevels];

    // decode balancePathIndex
    component bTokenID = Num2BitsIfEnabled(balanceLevels);
    bTokenID.enabled <== enabled;
    bTokenID.in <== tokenID;
    for (var i = 0; i < balanceLevels; i++) {
        balancePathIndex[i] <== bTokenID.out[i];
    }

    // decode accountPathIndex
    component bAccountID = Num2BitsIfEnabled(accountLevels);
    bAccountID.enabled <== enabled;
    bAccountID.in <== accountID;
    for (var i = 0; i < accountLevels; i++) {
        accountPathIndex[i] <== bAccountID.out[i];
    }

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    // - check balance tree update
    ////////

    signal orderRoot <== genesisOrderRoot;
    signal nonce <== 0;

    <%- codegen.generateBalanceCheckCircom({ctx: 'Old', replacers: { balance: '0', accountRoot: 'oldAccountRoot', sign: '0', ay: '0', 'ethAddr': '0'}}) %>


    <%- codegen.generateBalanceCheckCircom({ctx: 'New', replacers: { balance: 'amount', accountRoot: 'newAccountRoot'}}) %>

}
