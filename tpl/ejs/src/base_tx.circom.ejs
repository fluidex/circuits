template BalanceChecker(balanceLevels, accountLevels) {
    signal input enabled;

    signal input accountID;
    signal input tokenID;
    signal input ethAddr;
    signal input sign;
    signal input ay;
    signal input nonce;
    signal input balance;
    signal input orderRoot;
    signal input accountRoot;


    signal input balance_path_elements[balanceLevels][1];
    signal input account_path_elements[accountLevels][1];

    // Path index
    signal balance_path_index[balanceLevels];
    signal account_path_index[accountLevels];


    // decode balance_path_index
    component decodeBalancePath = Num2BitsIfEnabled(balanceLevels);
    decodeBalancePath.enabled <== enabled;
    decodeBalancePath.in <== tokenID;
    for (var i = 0; i < balanceLevels; i++) {
        balance_path_index[i] <== decodeBalancePath.out[i];
    }

    // decode account_path_index
    component decodeAccountPath = Num2BitsIfEnabled(accountLevels);
    decodeAccountPath.enabled <== enabled;
    decodeAccountPath.in <== accountID;
    for (var i = 0; i < accountLevels; i++) {
        account_path_index[i] <== decodeAccountPath.out[i];
    }

    <%- codegen.generateBalanceCheckCircom({ctx: '', replacers: {
        accountRoot: 'accountRoot', 
        balance: 'balance',
        nonce: 'nonce', 
        sign: 'sign', 
        ay: 'ay', 
        ethAddr: 'ethAddr', 
        orderRoot: 'orderRoot',
        balance_path_index: 'balance_path_index', 
        balance_path_elements: 'balance_path_elements',
        account_path_index: 'account_path_index', 
        account_path_elements: 'account_path_elements'
    }}) %>

}