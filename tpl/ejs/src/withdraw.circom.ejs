include "./lib/bitify.circom";
include "./lib/eddsaposeidon.circom";
include "./lib/utils_bjj.circom";
include "./lib/hash_state.circom";
include "./lib/binary_merkle_tree.circom";

/**
 * Process a rollup withdrawal transaction
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input amount - {Uint192} - amount to withdraw from L2
 * @input balance1 - {Uint192} - old balance of the account leaf
 * @input balance2 - {Uint192} - new balance of the account leaf
 */
template Withdraw(balanceLevels, accountLevels) {
    signal input enabled;
    signal input enableBalanceCheck1;
    signal input enableBalanceCheck2;
    signal input enableSigCheck1;

    signal input amount;
    signal input balance1;
    signal input nonce1;
    signal input balance2;
    signal input nonce2;

    signal input sign1;
    signal input ay1;
    signal input ethAddr1;
    signal input orderRoot1;
    
    signal input sign2;
    signal input ay2;
    signal input ethAddr2;
    signal input orderRoot2;

    signal input sigL2Hash1; // TODO: add a circuit to compute sigL2Hash. (compressedTx -> decodedTx -> sigL2Hash)

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    <%- codegen.generateMultiCheckEq([
        ['enableBalanceCheck1', '1'],
        ['enableBalanceCheck2', '1'],
        ['enableSigCheck1', '1'],
        ['balance2', 'balance1 - amount'],
        ['nonce2', 'nonce1 + 1'],
        ['sign1', 'sign2'],
        ['ay1', 'ay2'],
        ['ethAddr1', 'ethAddr2'],
        ['orderRoot1', 'orderRoot2'],
    ], {ctx: '', replacers: {}}) %>
}

/**
 * Process a rollup withdrawal transaction
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input accountID - {Uint48} - account index
 * @input amount - {Uint192} - amount to withdraw from L2
 * @input tokenID - {Uint32} - tokenID signed in the transaction
 * @input nonce - {Uint40} - nonce signed in the transaction
 * @input sigL2Hash - {Field} - hash L2 data to sign
 * @input s - {Field} - eddsa signature field
 * @input r8x - {Field} - eddsa signature field
 * @input r8y - {Field} - eddsa signature field
 * @input sign - {Bool} - sign of the account leaf
 * @input balance - {Uint192} - balance of the account leaf
 * @input ay - {Field} - ay of the account leaf
 * @input ethAddr - {Uint160} - ethAddr of the account leaf
 * @input orderRoot - {Field} - order root of the account leaf
 * @input balancePathElements[balanceLevels][1] - {Array(Field)} - siblings balance merkle proof of the account tree
 * @input accountPathElements[accountLevels][1] - {Array(Field)} - siblings account merkle proof of the account tree
 * @input oldAccountRoot - {Field} - initial acount state root
 * @input newAccountRoot - {Field} - final acount state root
 */
template WithdrawLegacy(balanceLevels, accountLevels) {
    signal input enabled;

    // Tx
    signal input accountID;
    signal input amount;
    signal input tokenID;
    signal input nonce;

    signal input sigL2Hash; // TODO: add a circuit to compute sigL2Hash. (compressedTx -> decodedTx -> sigL2Hash)
    signal input s;
    signal input r8x;
    signal input r8y;

    // Account-balance state
    signal input sign;
    signal input balance;
    signal input ay;
    signal input ethAddr;
    signal input orderRoot;
    signal input balancePathElements[balanceLevels][1];
    signal input accountPathElements[accountLevels][1];

    // Roots
    signal input oldAccountRoot;
    signal input newAccountRoot;

    // Path index
    signal balancePathIndex[balanceLevels];
    signal accountPathIndex[accountLevels];

    // decode balancePathIndex
    component bTokenID = Num2BitsIfEnabled(balanceLevels);
    bTokenID.enabled <== enabled;
    bTokenID.in <== tokenID;
    for (var i = 0; i < balanceLevels; i++) {
        balancePathIndex[i] <== bTokenID.out[i];
    }

    // decode accountPathIndex
    component bFrom = Num2BitsIfEnabled(accountLevels);
    bFrom.enabled <== enabled;
    bFrom.in <== accountID;
    for (var i = 0; i < accountLevels; i++) {
        accountPathIndex[i] <== bFrom.out[i];
    }

    // - verify eddsa signature
    ////////
    // computes babyjubjub X coordinate
    component getAx = AySign2Ax();
    getAx.ay <== ay;
    getAx.sign <== sign;

    // signature L2 verifier
    component sigVerifier = EdDSAPoseidonVerifier();
    sigVerifier.enabled <== enabled;

    sigVerifier.Ax <== getAx.ax;
    sigVerifier.Ay <== ay;

    sigVerifier.S <== s;
    sigVerifier.R8x <== r8x;
    sigVerifier.R8y <== r8y;

    sigVerifier.M <== sigL2Hash;

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    // - check balance tree update
    ////////
    <%- codegen.generateBalanceCheckCircom({ctx: 'Old', replacers: { accountRoot: 'oldAccountRoot'}}) %>

    <%- codegen.generateBalanceCheckCircom({ctx: 'New', replacers: { balance: 'balance - amount', 
        accountRoot: 'newAccountRoot', nonce: 'nonce + 1'}}) %>

}
