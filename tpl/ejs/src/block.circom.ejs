include "../node_modules/circomlib/circuits/compconstant.circom";
include "./lib/hash_state.circom";
include "./lib/sha256.circom";
include "./decode_tx.circom";
include "./encode_data.circom"
include "./deposit.circom";
include "./transfer.circom";
include "./withdraw.circom";
include "./spot_trade.circom";
include "./base_tx.circom";

/**
 * Process a rollup block and transactions inside
 * @param nTxs - number of transactions
 * @param balanceLevels - balance tree depth
 * @param accountLevels - account tree depth
 * @input encodedTxs[nTxs] - {Array(Field)} - encoded transactions
 * @input balancePathElements[nTxs][2][balanceLevels][1] - {Array(Array(Array(Array(Field))))} - balance tree path elements for each transaction
 * @input accountPathElements[nTxs][2][balanceLevels][1] - {Array(Array(Array(Array(Field))))} - account tree path elements for each transaction
 * @input orderRoots[nTxs][2] - {Array(Field)} - order roots for order maker taker account 
 * @input oldAccountRoots[nTxs] - {Array(Field)} - initial account state root for each transaction 
 * @input newAccountRoots[nTxs] - {Array(Field)} - final account state root for each transaction
 */
template Block(nTxs, balanceLevels, orderLevels, accountLevels) {
<%- codegen.generateBlockCircomInput({ctx: 'nTxs', replacers: {'_TxLength':'TxLength()'}}) %>

    oldAccountRoots[0] === oldRoot;
    newAccountRoots[nTxs - 1] === newRoot;

    // thisOldRoot === lastNewRoot
    for (var i = 1; i < nTxs; i++) {
        oldAccountRoots[i] === newAccountRoots[i-1];
    }

    // decode each transaction
    component decodedTx[nTxs];
    for (var i = 0; i < nTxs; i++) {
        decodedTx[i] = DecodeTx();
        for (var j = 0; j < TxLength(); j++) {
            decodedTx[i].in[j] <== encodedTxs[i][j];
        }
    }   

    component genesisOrderRoot = CalculateGenesisOrderRoot(orderLevels);

    // check transaction type
    component enableDeposit[nTxs];
    component enableTransfer[nTxs];
    component enableWithdraw[nTxs];
    component enableSpotTrade[nTxs];
    for (var i = 0; i < nTxs; i++) {
        enableDeposit[i] = IsEqual();
        enableDeposit[i].in[0] <== txsType[i];
        enableDeposit[i].in[1] <== TxTypeDeposit();

        enableTransfer[i] = IsEqual();
        enableTransfer[i].in[0] <== txsType[i];
        enableTransfer[i].in[1] <== TxTypeTransfer();

        enableWithdraw[i] = IsEqual();
        enableWithdraw[i].in[0] <== txsType[i];
        enableWithdraw[i].in[1] <== TxTypeWithdraw();

        enableSpotTrade[i] = IsEqual();
        enableSpotTrade[i].in[0] <== txsType[i];
        enableSpotTrade[i].in[1] <== TxTypeSpotTrade();
    }

    // data avaliability
    component encodeData[nTxs];
    for (var i = 0; i < nTxs; i++) {
        encodeData[i] = EncodeData(balanceLevels, orderLevels, accountLevels);
        <%- codegen.renderDAEncoderInput('encodeData[i]', 'encodedTxs[i]') %>
        encodeData[i].isDeposit <== enableDeposit[i].out;
        encodeData[i].isTransfer <== enableTransfer[i].out;
        encodeData[i].isWithdraw <== enableWithdraw[i].out;
        encodeData[i].isSpotTrade <== enableSpotTrade[i].out;
        encodeData[i].order1Unfilled <== (decodedTx[i].newOrder1AmountBuy - decodedTx[i].newOrder1FilledBuy) * (decodedTx[i].newOrder1AmountSell - decodedTx[i].newOrder1FilledSell);
        encodeData[i].order2Unfilled <== (decodedTx[i].newOrder2AmountBuy - decodedTx[i].newOrder2FilledBuy) * (decodedTx[i].newOrder2AmountSell - decodedTx[i].newOrder2FilledSell);
        encodeData[i].isL2KeyUpdated <== decodedTx[i].dstIsNew;        
    }

    var txBits = TxDataLength(balanceLevels, orderLevels, accountLevels);
    component txDataHasher = Sha256ToNum(nTxs *txBits);
    for (var i = 0; i < nTxs; i++) {
        for (var j = 0; j < txBits; j++) {
            encodeData[i].encodedTxData[j] ==> txDataHasher.bits[i*txBits + j];
        }
    }
    txDataHasher.hashOutHi === txDataHashHi;
    txDataHasher.hashOutLo === txDataHashLo;    

    // universal check
    component balanceChecker1[nTxs];
    component balanceChecker2[nTxs];
    component sigChecker1[nTxs];
    component sigChecker2[nTxs];

    // process each transaction
    component processDeposit[nTxs];
    component processTransfer[nTxs];
    component processWithdraw[nTxs];
    component processSpotTrade[nTxs];

    for (var i = 0; i < nTxs; i++) {

        // universal check
        <%- codegen.generateUniversalBalanceCheck('balanceChecker1[i]', 'decodedTx[i].', '1', {ctx: '1', replacers: {
            enabled: 'decodedTx[i].enableBalanceCheck1',
            accountRoot: 'oldAccountRoots[i]',
            tokenID: 'decodedTx[i].tokenID1',
            orderRoot: 'orderRoots[i][0]',
            balancePathElements: 'balancePathElements[i][0]',
            accountPathElements: 'accountPathElements[i][0]',
        }}) %>
        <%- codegen.generateUniversalBalanceCheck('balanceChecker2[i]', 'decodedTx[i].', '2', {ctx: '2', replacers: {
            enabled: 'decodedTx[i].enableBalanceCheck2',
            accountRoot: 'newAccountRoots[i]',
            tokenID: 'decodedTx[i].tokenID2',
            orderRoot:  'orderRoots[i][1]',
            balancePathElements: 'balancePathElements[i][1]',
            accountPathElements: 'accountPathElements[i][1]',
        }}) %>
        sigChecker1[i] = SigChecker();
        sigChecker1[i].enabled <== decodedTx[i].enableSigCheck1;
        <%- codegen.generateMultiFieldsAssign('sigChecker1[i]', 
            ['sigL2Hash', 's', 'r8x', 'r8y', 'ay', 'sign'], 
            'decodedTx[i].', '1') %>
        sigChecker2[i] = SigChecker();
        sigChecker2[i].enabled <== decodedTx[i].enableSigCheck2;
        <%- codegen.generateMultiFieldsAssign('sigChecker2[i]', 
            ['sigL2Hash', 's', 'r8x', 'r8y', 'ay', 'sign'], 
            'decodedTx[i].', '2') %>



        // try process deposit
        processDeposit[i] = Deposit(balanceLevels, accountLevels);
        processDeposit[i].enabled <== enableDeposit[i].out;
        processDeposit[i].genesisOrderRoot <== genesisOrderRoot.root;
        processDeposit[i].orderRoot1 <== orderRoots[i][0];
        processDeposit[i].orderRoot2 <== orderRoots[i][1];

        <%- codegen.generateMultiFieldsAssign('processDeposit[i]', 
            ['enableBalanceCheck1', 'enableBalanceCheck2', 'amount',  
            'balance1', 'nonce1', 'sign1', 'ay1', 
            'balance2', 'nonce2', 'sign2', 'ay2', 
            'dstIsNew'], 
            'decodedTx[i].') %>

        // try process transfer
        processTransfer[i] = Transfer(balanceLevels, accountLevels);
        processTransfer[i].enabled <== enableTransfer[i].out;
        processTransfer[i].genesisOrderRoot <== genesisOrderRoot.root;

        <%- codegen.generateMultiFieldsAssign('processTransfer[i]', 
            ['enableBalanceCheck1', 'enableBalanceCheck2', 'enableSigCheck1',
            'amount', 
            'balance1', 'nonce1', 'sign1', 'ay1', 
            'balance2', 'nonce2', 'sign2', 'ay2', 
            'sigL2Hash1',
            'dstIsNew', 
            ], 
            'decodedTx[i].') %>

        processTransfer[i].fromAccountID <== decodedTx[i].accountID1;
        processTransfer[i].toAccountID <== decodedTx[i].accountID2;
        processTransfer[i].tokenID <== decodedTx[i].tokenID1;

        processTransfer[i].orderRoot1 <== orderRoots[i][0];
        processTransfer[i].orderRoot2 <== orderRoots[i][1];
        for (var j = 0; j < balanceLevels; j++) {
            processTransfer[i].senderBalancePathElements[j][0] <== balancePathElements[i][0][j][0];
            processTransfer[i].receiverBalancePathElements[j][0] <== balancePathElements[i][1][j][0];
        }
        for (var j = 0; j < accountLevels; j++) {
            processTransfer[i].senderAccountPathElements[j][0] <== accountPathElements[i][0][j][0];
            processTransfer[i].receiverAccountPathElements[j][0] <== accountPathElements[i][1][j][0];
        }
        processTransfer[i].oldAccountRoot <== oldAccountRoots[i];
        processTransfer[i].newAccountRoot <== newAccountRoots[i];

        // try process withdraw
        processWithdraw[i] = Withdraw(balanceLevels, accountLevels);
        processWithdraw[i].enabled <== enableWithdraw[i].out;

        <%- codegen.generateMultiFieldsAssign('processWithdraw[i]', 
            ['enableBalanceCheck1', 'enableBalanceCheck2', 'enableSigCheck1',
            'amount',
            'balance1', 'balance2',
            'sigL2Hash1',
            'ay1', 'sign1', 'nonce1',
            'ay2', 'sign2', 'nonce2'], 
            'decodedTx[i].') %>  
        processWithdraw[i].orderRoot1 <== orderRoots[i][0];
        processWithdraw[i].orderRoot2 <== orderRoots[i][1];    

        // try spot trade
        processSpotTrade[i] = SpotTrade(balanceLevels, orderLevels, accountLevels);
        processSpotTrade[i].enabled <== enableSpotTrade[i].out;

        <%- codegen.generateMultiFieldsAssign('processSpotTrade[i]', 
            codegen.config.orderLeafs.concat([
            'enableBalanceCheck1', 'enableBalanceCheck2', 'enableSigCheck1', 'enableSigCheck2',
            'tokenID1', 'tokenID2']), 
            'decodedTx[i].') %>
        <%- codegen.renderSpotTradeOrderAssign('processSpotTrade[i]', 'decodedTx[i]') %>
        <%- codegen.renderSpotTradeAssign('processSpotTrade[i]', 'i', {}) %>
    }
}
