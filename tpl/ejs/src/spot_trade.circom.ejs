include "./lib/bitify.circom";
include "../node_modules/circomlib/circuits/comparators.circom";
include "../node_modules/circomlib/circuits/gates.circom";
include "./lib/binary_merkle_tree.circom";
include "./lib/hash_state.circom";

template amountCheck() {
    signal input enabled;

    signal input amount;
    component gt0 = GreaterThan(192);
    gt0.in[0] <== amount;
    gt0.in[1] <== 0;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== gt0.out;
    check.in[1] <== 1;
}

// (this_sell/this_buy) * 1000 <= (total_sell/total_buy) * 1001
// (this_sell * total_buy * 1000) <= (this_buy * total_sell * 1001)
template priceCheck() {
    signal input enabled;

    signal input this_sell;
    signal input this_buy;
    signal input total_sell;
    signal input total_buy;

    // TODO: overflow check
    component valid = LessEqThan(252);
    valid.in[0] <== this_sell * total_buy * 1000;
    valid.in[1] <== this_buy * total_sell * 1001;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== valid.out;
    check.in[1] <== 1;
}

// TODO: use sell for filled or use buy for filled?
// for now we have both. but usually for bz we only have one filled, according to types. 
// (filled_sell + this_sell <= total_sell) || (filled_buy + this_buy <= total_buy)
template fillLimitCheck() {
    signal input enabled;

    signal input filled_sell;
    signal input this_sell;
    signal input total_sell;
    signal input filled_buy;
    signal input this_buy;
    signal input total_buy;

    component sellLimit = LessEqThan(192);
    sellLimit.in[0] <== filled_sell + this_sell;
    sellLimit.in[1] <== total_sell;
    component buyLimit = LessEqThan(192);
    buyLimit.in[0] <== filled_buy + this_buy;
    buyLimit.in[1] <== total_buy;

    component limitCheck = OR();
    limitCheck.a <== sellLimit.out;
    limitCheck.b <== buyLimit.out;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== limitCheck.out;
    check.in[1] <== 1;
}

// TODO: delete order if fullfilled
template orderUpdater(orderLevels) {
    // order pos is the order location/index inside the tree, less than 2**n
    // order id is the incremental order id, like a nouce.
    signal input enabled;
    signal input order_pos;
    signal input order_id;
    signal input tokensell;
    signal input tokenbuy;
    signal input filled_sell;
    signal input this_sell;
    signal input total_sell;
    signal input filled_buy;
    signal input this_buy;
    signal input total_buy;

    signal input order_path_elements[orderLevels][1];

    signal output oldOrderRoot;
    signal output newOrderRoot;

    signal order_path_index[orderLevels];

   // decode order_path_index
    component border_pos = Num2BitsIfEnabled(orderLevels);
    border_pos.enabled <== enabled;
    border_pos.in <== order_pos;
    for (var i = 0; i < orderLevels; i++) {
        order_path_index[i] <== border_pos.out[i];
    }

    // TODO: we can just update old order with new order like PlaceOrder here
    // so we can use less txs to finish a SpotTrade
    component oldOrderHash = HashOrder();
    oldOrderHash.tokensell <== tokensell;
    oldOrderHash.tokenbuy <== tokenbuy;
    oldOrderHash.filled_sell <== filled_sell;
    oldOrderHash.filled_buy <== filled_buy;
    oldOrderHash.total_sell <== total_sell;
    oldOrderHash.total_buy <== total_buy;
    oldOrderHash.order_id <== order_id;

    // TODO: underflow check

    // TODO: overflow check

    component newOrderHash = HashOrder();
    newOrderHash.tokensell <== tokensell;
    newOrderHash.tokenbuy <== tokenbuy;
    newOrderHash.filled_sell <== filled_sell + this_sell;
    newOrderHash.filled_buy <== filled_buy + this_buy;
    newOrderHash.total_sell <== total_sell;
    newOrderHash.total_buy <== total_buy;
    newOrderHash.order_id <== order_id;

    // - order tree
    ////////
    component old_order_tree = CalculateRootFromMerklePath(orderLevels);
    component new_order_tree = CalculateRootFromMerklePath(orderLevels);
    old_order_tree.leaf <== oldOrderHash.out;
    new_order_tree.leaf <== newOrderHash.out;
    for (var i = 0; i < orderLevels; i++) {
        old_order_tree.path_index[i] <== order_path_index[i];
        old_order_tree.path_elements[i][0] <== order_path_elements[i][0];
        new_order_tree.path_index[i] <== order_path_index[i];
        new_order_tree.path_elements[i][0] <== order_path_elements[i][0];
    }
    old_order_tree.root ==> oldOrderRoot;
    new_order_tree.root ==> newOrderRoot;
}

// TODO: maker taker (related to fee), according to timestamp: order1 maker, order2 taker
// TODO: is tradeHistory_storage_leaf necessary?
template SpotTrade(balanceLevels, orderLevels, accountLevels) {
    signal input enabled;

    signal input order1_pos;
    signal input order1_id;
    signal input order1_tokensell;
    signal input order1_amountsell;
    signal input order1_tokenbuy;
    signal input order1_amountbuy;
    signal input order2_pos;
    signal input order2_id;
    signal input order2_tokensell;
    signal input order2_amountsell;
    signal input order2_tokenbuy;
    signal input order2_amountbuy;
    component check1 = ForceEqualIfEnabled();
    check1.enabled <== enabled;
    check1.in[0] <== order1_tokensell
    check1.in[1] <== order2_tokenbuy;
    component check2 = ForceEqualIfEnabled();
    check2.enabled <== enabled;
    check2.in[0] <== order1_tokenbuy;
    check2.in[1] <== order2_tokensell;

    signal input amount_2to1;
    signal input amount_1to2;
    // amount_2to1 > 0;
    component order1_thisget_check = amountCheck();
    order1_thisget_check.enabled <== enabled;
    order1_thisget_check.amount <== amount_2to1;
    // amount_1to2 > 0;
    component order2_thisget_check = amountCheck();
    order2_thisget_check.enabled <== enabled;
    order2_thisget_check.amount <== amount_1to2;

    /// order1 price check
    component order1_pricecheck = priceCheck();
    order1_pricecheck.enabled <== enabled;
    order1_pricecheck.this_sell <== amount_1to2;
    order1_pricecheck.this_buy <== amount_2to1;
    order1_pricecheck.total_sell <== order1_amountsell;
    order1_pricecheck.total_buy <== order1_amountbuy;

    /// order2 price check
    component order2_pricecheck = priceCheck();
    order2_pricecheck.enabled <== enabled;
    order2_pricecheck.this_sell <== amount_2to1;
    order2_pricecheck.this_buy <== amount_1to2;
    order2_pricecheck.total_sell <== order2_amountsell;
    order2_pricecheck.total_buy <== order2_amountbuy;

    // /// order1 fill_limit check
    signal input order1_filledsell;
    signal input order1_filledbuy;
    component order1_filledcheck = fillLimitCheck();
    order1_filledcheck.enabled <== enabled;
    order1_filledcheck.filled_sell <== order1_filledsell;
    order1_filledcheck.this_sell <== amount_1to2;
    order1_filledcheck.total_sell <== order1_amountsell;
    order1_filledcheck.filled_buy <== order1_filledbuy;
    order1_filledcheck.this_buy <== amount_2to1;
    order1_filledcheck.total_buy <== order1_amountbuy;

    // /// order2 fill_limit check
    signal input order2_filledsell;
    signal input order2_filledbuy;
    component order2_filledcheck = fillLimitCheck();
    order2_filledcheck.enabled <== enabled;
    order2_filledcheck.filled_sell <== order2_filledsell;
    order2_filledcheck.this_sell <== amount_2to1;
    order2_filledcheck.total_sell <== order2_amountsell;
    order2_filledcheck.filled_buy <== order2_filledbuy;
    order2_filledcheck.this_buy <== amount_1to2;
    order2_filledcheck.total_buy <== order2_amountbuy;


    // TODO: check timestamp & 2 orders' validUntil
    // TODO: tx fee & trading fee


    signal input order_path_elements[2][orderLevels][1];
    /// update order 1
    component order1_updater = orderUpdater(orderLevels);
    order1_updater.enabled <== enabled;
    order1_updater.order_pos <== order1_pos;
    order1_updater.order_id <== order1_id;
    order1_updater.tokensell <== order1_tokensell;
    order1_updater.tokenbuy <== order1_tokenbuy;
    order1_updater.filled_sell <== order1_filledsell;
    order1_updater.this_sell <== amount_1to2;
    order1_updater.total_sell <== order1_amountsell;
    order1_updater.filled_buy <== order1_filledbuy;
    order1_updater.this_buy <== amount_2to1;
    order1_updater.total_buy <== order1_amountbuy;
    for (var i = 0; i < orderLevels; i++) {
        order1_updater.order_path_elements[i][0] <== order_path_elements[0][i][0];
    }

    /// update order 2
    component order2_updater = orderUpdater(orderLevels);
    order2_updater.enabled <== enabled;
    order2_updater.order_pos <== order2_pos;
    order2_updater.order_id <== order2_id;
    order2_updater.tokensell <== order2_tokensell;
    order2_updater.tokenbuy <== order2_tokenbuy;
    order2_updater.filled_sell <== order2_filledsell;
    order2_updater.this_sell <== amount_2to1;
    order2_updater.total_sell <== order2_amountsell;
    order2_updater.filled_buy <== order2_filledbuy;
    order2_updater.this_buy <== amount_1to2;
    order2_updater.total_buy <== order2_amountbuy;
    for (var i = 0; i < orderLevels; i++) {
        order2_updater.order_path_elements[i][0] <== order_path_elements[1][i][0];
    }

    signal input order1_accountID;
    signal input order2_accountID;
    signal input order1_account_nonce;
    signal input order2_account_nonce;
    signal input order1_account_sign;
    signal input order2_account_sign;
    signal input order1_account_ay;
    signal input order2_account_ay;
    signal input order1_account_ethAddr;
    signal input order2_account_ethAddr;
    signal input order1_token_sell_balance;
    signal input order1_token_buy_balance;
    signal input order2_token_sell_balance;
    signal input order2_token_buy_balance;
    signal input old_account_root;
    signal input new_account_root;
    signal input old_account1_balance_path_elements[balanceLevels][1];
    signal input tmp_account1_balance_path_elements[balanceLevels][1];
    signal input old_account1_path_elements[accountLevels][1];
    signal input old_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_path_elements[accountLevels][1];
    component transfer = tradeTransfer(balanceLevels, accountLevels);
    transfer.enabled <== enabled;
    transfer.accountID1 <== order1_accountID;
    transfer.accountID2 <== order2_accountID;
    transfer.amount_1to2 <== amount_1to2;
    transfer.amount_2to1 <== amount_2to1;
    transfer.tokenID_1to2 <== order1_tokensell;
    transfer.tokenID_2to1 <== order2_tokensell;
    transfer.nonce1 <== order1_account_nonce;
    transfer.sign1 <== order1_account_sign;
    transfer.account1_balance_sell <== order1_token_sell_balance;
    transfer.account1_balance_buy <== order1_token_buy_balance;
    transfer.ay1 <== order1_account_ay;
    transfer.ethAddr1 <== order1_account_ethAddr;
    transfer.oldOrder1Root <== order1_updater.oldOrderRoot;
    transfer.newOrder1Root <== order1_updater.newOrderRoot;
    for (var i = 0; i < balanceLevels; i++) {
        transfer.old_account1_balance_path_elements[i][0] <== old_account1_balance_path_elements[i][0];
        transfer.tmp_account1_balance_path_elements[i][0] <== tmp_account1_balance_path_elements[i][0];
    }
    for (var i = 0; i < accountLevels; i++) {
        transfer.old_account1_path_elements[i][0] <== old_account1_path_elements[i][0];
    }
    transfer.nonce2 <== order2_account_nonce;
    transfer.sign2 <== order2_account_sign;
    transfer.account2_balance_sell <== order2_token_sell_balance;
    transfer.account2_balance_buy <== order2_token_buy_balance;
    transfer.ay2 <== order2_account_ay;
    transfer.ethAddr2 <== order2_account_ethAddr;
    transfer.oldOrder2Root <== order2_updater.oldOrderRoot;
    transfer.newOrder2Root <== order2_updater.newOrderRoot;
    transfer.oldAccountRoot <== old_account_root;
    transfer.newAccountRoot <== new_account_root;
    for (var i = 0; i < balanceLevels; i++) {
        transfer.old_account2_balance_path_elements[i][0] <== old_account2_balance_path_elements[i][0];
        transfer.tmp_account2_balance_path_elements[i][0] <== tmp_account2_balance_path_elements[i][0];
    }
    for (var i = 0; i < accountLevels; i++) {
        transfer.tmp_account2_path_elements[i][0] <== tmp_account2_path_elements[i][0];
    }
}

template tradeTransfer(balanceLevels, accountLevels) {
    signal input enabled;

    // Tx
    signal input accountID1;
    signal input accountID2;
    signal input amount_1to2;
    signal input amount_2to1;
    signal input tokenID_1to2;
    signal input tokenID_2to1;

    // order1 account state
    signal input nonce1;
    signal input sign1;
    signal input account1_balance_sell;
    signal input account1_balance_buy;
    signal input ay1;
    signal input ethAddr1;
    signal input old_account1_balance_path_elements[balanceLevels][1];
    signal input tmp_account1_balance_path_elements[balanceLevels][1];
    signal input old_account1_path_elements[accountLevels][1];

    // order2 account state
    signal input nonce2;
    signal input sign2;
    signal input account2_balance_sell;
    signal input account2_balance_buy;
    signal input ay2;
    signal input ethAddr2;
    signal input old_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_path_elements[accountLevels][1];

    // Roots
    signal input oldOrder1Root;
    signal input oldOrder2Root;
    signal input newOrder1Root;
    signal input newOrder2Root;
    signal input oldAccountRoot;
    signal input newAccountRoot;

    signal balance_1to2_path_index[balanceLevels];
    signal balance_2to1_path_index[balanceLevels];
    signal account1_path_index[accountLevels];
    signal account2_path_index[accountLevels];

    // decode balance_path_index
    component bTokenID_1to2 = Num2BitsIfEnabled(balanceLevels);
    bTokenID_1to2.enabled <== enabled;
    bTokenID_1to2.in <== tokenID_1to2;
    for (var i = 0; i < balanceLevels; i++) {
        balance_1to2_path_index[i] <== bTokenID_1to2.out[i];
    }
    component bTokenID_2to1 = Num2BitsIfEnabled(balanceLevels);
    bTokenID_2to1.enabled <== enabled;
    bTokenID_2to1.in <== tokenID_2to1;
    for (var i = 0; i < balanceLevels; i++) {
        balance_2to1_path_index[i] <== bTokenID_2to1.out[i];
    }

    // decode account_path_index
    component bAccountID1 = Num2BitsIfEnabled(accountLevels);
    bAccountID1.enabled <== enabled;
    bAccountID1.in <== accountID1;
    for (var i = 0; i < accountLevels; i++) {
        account1_path_index[i] <== bAccountID1.out[i];
    }
    component bAccountID2 = Num2BitsIfEnabled(accountLevels);
    bAccountID2.enabled <== enabled;
    bAccountID2.in <== accountID2;
    for (var i = 0; i < accountLevels; i++) {
        account2_path_index[i] <== bAccountID2.out[i];
    }

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    // - balance tree
    ////////


    // we need make 4 updates to the tree here {sender,receiver}x{token1,token2}

    // Step1: check old sender state
    <%- codegen.generateBalanceCheckCircom({ctx: 'Account1Old', vars: {
        balance: 'account1_balance_sell',
        balance_path_index: 'balance_1to2_path_index',
        balance_path_elements: 'old_account1_balance_path_elements',
        account_path_index: 'account1_path_index',
        account_path_elements: 'old_account1_path_elements',
        sign: "sign1",
        ay: 'ay1',
        nonce: 'nonce1',
        ethAddr: 'ethAddr1',
        accountRoot: 'oldAccountRoot',
        orderRoot: 'oldOrder1Root'
    }}) %>

    // Step2: update sender balance
    <%- codegen.generateSameRootCircom({ctx: 'Account1Update', vars: {
        leaf1: 'account1_balance_sell - amount_1to2',
        path_elements1: 'old_account1_balance_path_elements',
        path_index1: 'balance_1to2_path_index',
        leaf2: 'account1_balance_buy',
        path_elements2: 'tmp_account1_balance_path_elements',
        path_index2: 'balance_2to1_path_index',
        levels: 'balanceLevels'
    }}) %>

    // Step3: after update account1, before update account2
    <%- codegen.generateFromTpl(codegen.tpls.CalcAccountTreeFromBalanceTpl, {ctx: 'MidAccount1', vars: {
        balance: 'account1_balance_buy + amount_2to1',
        balance_path_index: 'balance_2to1_path_index',
        balance_path_elements: 'tmp_account1_balance_path_elements',
        account_path_index: 'account1_path_index',
        account_path_elements: 'old_account1_path_elements',
        nonce: 'nonce1',
        sign: "sign1",
        ay: 'ay1',
        ethAddr: 'ethAddr1',
        orderRoot: 'newOrder1Root'
    }}) %>
    <%- codegen.generateFromTpl(codegen.tpls.CalcAccountTreeFromBalanceTpl, {ctx: 'MidAccount2', vars: {
        balance: 'account2_balance_sell',
        balance_path_index: 'balance_2to1_path_index',
        balance_path_elements: 'old_account2_balance_path_elements',
        account_path_index: 'account2_path_index',
        account_path_elements: 'tmp_account2_path_elements',
        nonce: 'nonce2',
        sign: "sign2",
        ay: 'ay2',
        ethAddr: 'ethAddr2',
        orderRoot: 'oldOrder2Root'
    }}) %>
    component checkMid = ForceEqualIfEnabled();
    checkMid.enabled <== enabled;
    checkMid.in[0] <== accountTreeMidAccount1.root;
    checkMid.in[1] <== accountTreeMidAccount2.root;

    // Step4: update account 2 balance
    <%- codegen.generateSameRootCircom({ctx: 'Account2Update', vars: {
        leaf1: 'account2_balance_sell - amount_2to1',
        path_elements1: 'old_account2_balance_path_elements',
        path_index1: 'balance_2to1_path_index',
        leaf2: 'account2_balance_buy',
        path_elements2: 'tmp_account2_balance_path_elements',
        path_index2: 'balance_1to2_path_index',
        levels: 'balanceLevels'
    }}) %>

    // Step5: check new state root
    <%- codegen.generateBalanceCheckCircom({ctx: 'Account2New', vars: {
        balance: 'account2_balance_buy + amount_1to2',
        balance_path_index: 'balance_1to2_path_index',
        balance_path_elements: 'tmp_account2_balance_path_elements',
        account_path_index: 'account2_path_index',
        account_path_elements: 'tmp_account2_path_elements',
        nonce: 'nonce2',
        sign: "sign2",
        ay: 'ay2',
        ethAddr: 'ethAddr2',
        accountRoot: 'newAccountRoot',
        orderRoot: 'newOrder2Root'
    }}) %>
}
