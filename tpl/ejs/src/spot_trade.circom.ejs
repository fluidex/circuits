include "./lib/bitify.circom";
include "../node_modules/circomlib/circuits/comparators.circom";
include "../node_modules/circomlib/circuits/gates.circom";
include "./lib/binary_merkle_tree.circom";
include "./lib/hash_state.circom";

template amountCheck() {
    signal input enabled;

    signal input amount;
    component gt0 = GreaterThan(192);
    gt0.in[0] <== amount;
    gt0.in[1] <== 0;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== gt0.out;
    check.in[1] <== 1;
}

// (thisSell/thisBuy) * 1000 <= (totalSell/totalBuy) * 1001
// (thisSell * totalBuy * 1000) <= (thisBuy * totalSell * 1001)
template priceCheck() {
    signal input enabled;

    signal input thisSell;
    signal input thisBuy;
    signal input totalSell;
    signal input totalBuy;

    // TODO: overflow check
    component valid = LessEqThan(252);
    valid.in[0] <== thisSell * totalBuy * 1000;
    valid.in[1] <== thisBuy * totalSell * 1001;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== valid.out;
    check.in[1] <== 1;
}

// TODO: use sell for filled or use buy for filled?
// for now we have both. but usually for bz we only have one filled, according to types. 
// (filledSell + thisSell <= totalSell) || (filledBuy + thisBuy <= totalBuy)
template fillLimitCheck() {
    signal input enabled;

    signal input filledSell;
    signal input thisSell;
    signal input totalSell;
    signal input filledBuy;
    signal input thisBuy;
    signal input totalBuy;

    component sellLimit = LessEqThan(192);
    sellLimit.in[0] <== filledSell;// + thisSell;
    sellLimit.in[1] <== totalSell;
    component buyLimit = LessEqThan(192);
    buyLimit.in[0] <== filledBuy;// + thisBuy;
    buyLimit.in[1] <== totalBuy;

    component limitCheck = OR();
    limitCheck.a <== sellLimit.out;
    limitCheck.b <== buyLimit.out;

    component check = ForceEqualIfEnabled();
    check.enabled <== enabled;
    check.in[0] <== limitCheck.out;
    check.in[1] <== 1;
}

// orderUpdater:
// (1) checks old order state
// (2) check new order state
// (3) check order detail:
//  (a) oldOrderID: m, newOrderID: n, m < n, replace old order, check new_filled_amount === this_amount
//  (b) oldOrderID: n, newOrderID: n, same order, check new_filled_amount === old_filled_amount + this_mount
//  (c) oldOrderID: 0, newOrderID: n, new order, checking either constraint works, since them are same actually
//     (a) and (c) can be checked similarly
template orderUpdater(orderLevels) {
    // order pos is the order location/index inside the tree, less than 2**n
    // order id is the incremental order id, like a nouce.

    signal input enabled;
    signal input orderPos;
    signal input thisSell;
    signal input thisBuy;


    signal input oldOrderID;
    signal input oldOrderTokenSell;
    signal input oldOrderFilledSell;
    signal input oldOrderAmountSell;
    signal input oldOrderTokenBuy;
    signal input oldOrderFilledBuy;
    signal input oldOrderAmountBuy;

    signal input newOrderID;
    signal input newOrderTokenSell;
    signal input newOrderFilledSell;
    signal input newOrderAmountSell;
    signal input newOrderTokenBuy;
    signal input newOrderFilledBuy;
    signal input newOrderAmountBuy;

    signal input order_path_elements[orderLevels][1];
    signal order_path_index[orderLevels];

    signal output oldOrderRoot;
    signal output newOrderRoot;

    // decode order_path_index
    component borderPos = Num2BitsIfEnabled(orderLevels);
    borderPos.enabled <== enabled;
    borderPos.in <== orderPos;
    for (var i = 0; i < orderLevels; i++) {
        order_path_index[i] <== borderPos.out[i];
    }


    // TODO: underflow check

    // TODO: overflow check

    <%- codegen.generateFromTpl(codegen.tpls.CalcOrderTreeTpl, {ctx: 'Old', replacers: {
        orderTokenSell: 'oldOrderTokenSell',
        orderTokenBuy: 'oldOrderTokenBuy', 
        orderFilledSell: 'oldOrderFilledSell', 
        orderFilledBuy: 'oldOrderFilledBuy',
        orderAmountSell: 'oldOrderAmountSell', 
        orderAmountBuy: 'oldOrderAmountBuy', 
        orderID: 'oldOrderID'
    }}) %>
    oldOrderRoot <== orderTreeOld.root;

    <%- codegen.generateFromTpl(codegen.tpls.CalcOrderTreeTpl, {ctx: 'New', replacers: {
        orderTokenSell: 'newOrderTokenSell',
        orderTokenBuy: 'newOrderTokenBuy', 
        orderFilledSell: 'newOrderFilledSell', 
        orderFilledBuy: 'newOrderFilledBuy',
        orderAmountSell: 'newOrderAmountSell', 
        orderAmountBuy: 'newOrderAmountBuy', 
        orderID: 'newOrderID'
    }}) %>
    newOrderRoot <== orderTreeNew.root;


    // for the below two checks, we'd better let isnewOrder = isnewOrder || enabled,
    // and isSameOrder = isSameOrder || enabled
    // For now, we set all inputs as 0s, so when enabled is false, the two checks can pass even without 'or'

    component isNewOrder = LessThan(192);
    isNewOrder.in[0] <== oldOrderID;
    isNewOrder.in[1] <== newOrderID;
    component isNewOrderAndEnabled = AND();
    isNewOrderAndEnabled.a <== isNewOrder.out;
    isNewOrderAndEnabled.b <== enabled;

    <%- codegen.generateMultiCheckEq([
        ['newOrderFilledSell', 'thisSell'],
        ['newOrderFilledBuy', 'thisBuy']
    ], {ctx: 'WhenNewOrder', replacers: {enabled: 'isNewOrderAndEnabled.out'}}) %>


    component isSameOrder = IsEqual();
    isSameOrder.in[0] <== oldOrderID;
    isSameOrder.in[1] <== newOrderID;
    component isSameOrderAndEnabled = AND();
    isSameOrderAndEnabled.a <== isSameOrder.out;
    isSameOrderAndEnabled.b <== enabled;
    <%- codegen.generateMultiCheckEq([
        ['newOrderFilledSell', 'oldOrderFilledSell + thisSell'],
        ['newOrderFilledBuy', 'oldOrderFilledBuy + thisBuy'],
        ['newOrderAmountSell', 'oldOrderAmountSell'],
        ['newOrderAmountBuy', 'oldOrderAmountBuy'],
        ['newOrderTokenSell', 'oldOrderTokenSell'],
        ['newOrderTokenBuy', 'oldOrderTokenBuy']
    ], {ctx: 'WhenSameOrder', replacers: {enabled: 'isSameOrderAndEnabled.out'}}) %>


    // check oldOrderID <= newOrderID
    component isValid = OR();
    isValid.a <== isNewOrder.out;
    isValid.b <== isSameOrder.out;  
    component checkValid = ForceEqualIfEnabled();
    checkValid.enabled <== enabled;
    checkValid.in[0] <== isValid.out;
    checkValid.in[1] <== 1;  
}

// TODO: maker taker (related to fee), according to timestamp: order1 maker, order2 taker
// TODO: is tradeHistory_storage_leaf necessary?
template SpotTrade(balanceLevels, orderLevels, accountLevels) {
    signal input enabled;

    signal input order1Pos;
    signal input order2Pos;


    <% /* %>
    <% for (const f of ['id', 'TokenSell', 'FilledSell', 'AmountSell', 'TokenBuy', 'FilledBuy', 'AmountBuy']) { %>
    signal input order_<%= f %>s[4];
    <% ['old', 'new'].forEach(function(prefix, i) { ['1', '2'].forEach(function(mid, j){ %>
    signal <%= prefix %>_order<%= mid %>_<%= f %>;
    <%= prefix %>_order<%= mid %>_<%= f %> <== order_<%= f %>s<%= i*2+j %>;<% })}) %>
    <% } %>
    <% */ %>

    <% for(const item of codegen.config.orderLeafs) { %>
    signal input <%= item %>;<% } %>

    component check1 = ForceEqualIfEnabled();
    check1.enabled <== enabled;
    check1.in[0] <== newOrder1TokenSell;
    check1.in[1] <== newOrder2TokenBuy;
    component check2 = ForceEqualIfEnabled();
    check2.enabled <== enabled;
    check2.in[0] <== newOrder1TokenBuy;
    check2.in[1] <== newOrder2TokenSell;

    signal input amount_2to1;
    signal input amount_1to2;
    // amount_2to1 > 0;
    component order1Thisget_check = amountCheck();
    order1Thisget_check.enabled <== enabled;
    order1Thisget_check.amount <== amount_2to1;
    // amount_1to2 > 0;
    component order2Thisget_check = amountCheck();
    order2Thisget_check.enabled <== enabled;
    order2Thisget_check.amount <== amount_1to2;

    /// order1 price check
    component order1_pricecheck = priceCheck();
    order1_pricecheck.enabled <== enabled;
    order1_pricecheck.thisSell <== amount_1to2;
    order1_pricecheck.thisBuy <== amount_2to1;
    order1_pricecheck.totalSell <== newOrder1AmountSell;
    order1_pricecheck.totalBuy <== newOrder1AmountBuy;

    /// order2 price check
    component order2_pricecheck = priceCheck();
    order2_pricecheck.enabled <== enabled;
    order2_pricecheck.thisSell <== amount_2to1;
    order2_pricecheck.thisBuy <== amount_1to2;
    order2_pricecheck.totalSell <== newOrder2AmountSell;
    order2_pricecheck.totalBuy <== newOrder2AmountBuy;

    // /// order1 fill_limit check
    component order1_filledcheck = fillLimitCheck();
    order1_filledcheck.enabled <== enabled;
    order1_filledcheck.filledSell <== newOrder1FilledSell;
    order1_filledcheck.thisSell <== amount_1to2;
    order1_filledcheck.totalSell <== newOrder1AmountSell;
    order1_filledcheck.filledBuy <== newOrder1FilledBuy;
    order1_filledcheck.thisBuy <== amount_2to1;
    order1_filledcheck.totalBuy <== newOrder1AmountBuy;

    // /// order2 fill_limit check
    component order2_filledcheck = fillLimitCheck();
    order2_filledcheck.enabled <== enabled;
    order2_filledcheck.filledSell <== newOrder2FilledSell;
    order2_filledcheck.thisSell <== amount_2to1;
    order2_filledcheck.totalSell <== newOrder2AmountSell;
    order2_filledcheck.filledBuy <== newOrder2FilledBuy;
    order2_filledcheck.thisBuy <== amount_1to2;
    order2_filledcheck.totalBuy <== newOrder2AmountBuy;


    // TODO: check timestamp & 2 orders' validUntil
    // TODO: tx fee & trading fee


    signal input order_path_elements[2][orderLevels][1];
    /// update order 1

    component order1_updater = orderUpdater(orderLevels);
    order1_updater.enabled <== enabled;
    order1_updater.orderPos <== order1Pos;
    order1_updater.thisSell <== amount_1to2;
    order1_updater.thisBuy <== amount_2to1;
    <%- codegen.generateMultiFieldsAssign('order1_updater', 
            ['oldOrderID', 'oldOrderTokenSell', 'oldOrderFilledSell', 'oldOrderAmountSell', 'oldOrderTokenBuy', 'oldOrderFilledBuy', 'oldOrderAmountBuy',
             'newOrderID', 'newOrderTokenSell', 'newOrderFilledSell', 'newOrderAmountSell', 'newOrderTokenBuy', 'newOrderFilledBuy', 'newOrderAmountBuy'
            ], '', '', 4).replaceAll(' oldOrder', ' oldOrder1').replaceAll(' newOrder', ' newOrder1') %>
    for (var i = 0; i < orderLevels; i++) {
        order1_updater.order_path_elements[i][0] <== order_path_elements[0][i][0];
    }

    /// update order 2
    component order2_updater = orderUpdater(orderLevels);
    order2_updater.enabled <== enabled;
    order2_updater.orderPos <== order2Pos;
    order2_updater.thisSell <== amount_2to1;
    order2_updater.thisBuy <== amount_1to2;
    <%- codegen.generateMultiFieldsAssign('order2_updater', 
            ['oldOrderID', 'oldOrderTokenSell', 'oldOrderFilledSell', 'oldOrderAmountSell', 'oldOrderTokenBuy', 'oldOrderFilledBuy', 'oldOrderAmountBuy',
             'newOrderID', 'newOrderTokenSell', 'newOrderFilledSell', 'newOrderAmountSell', 'newOrderTokenBuy', 'newOrderFilledBuy', 'newOrderAmountBuy'
            ], '', '', 4).replaceAll(' oldOrder', ' oldOrder2').replaceAll(' newOrder', ' newOrder2') %>
    for (var i = 0; i < orderLevels; i++) {
        order2_updater.order_path_elements[i][0] <== order_path_elements[1][i][0];
    }


    signal input order1AccountID;
    signal input order2AccountID;
    signal input order1AccountNonce;
    signal input order2AccountNonce;
    signal input order1AccountSign;
    signal input order2AccountSign;
    signal input order1AccountAy;
    signal input order2AccountAy;
    signal input order1AccountEthAddr;
    signal input order2AccountEthAddr;

    signal input order1TokenSellBalance;
    signal input order1TokenBuyBalance;
    signal input order2TokenSellBalance;
    signal input order2TokenBuyBalance;

    signal input old_account_root;
    signal input new_account_root;
    signal input old_account1_balance_path_elements[balanceLevels][1];
    signal input tmp_account1_balance_path_elements[balanceLevels][1];
    signal input old_account1_path_elements[accountLevels][1];
    signal input old_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_path_elements[accountLevels][1];
    
    component transfer = tradeTransfer(balanceLevels, accountLevels);
    transfer.enabled <== enabled;
    transfer.accountID1 <== order1AccountID;
    transfer.accountID2 <== order2AccountID;
    transfer.amount_1to2 <== amount_1to2;
    transfer.amount_2to1 <== amount_2to1;
    transfer.tokenID_1to2 <== newOrder1TokenSell;
    transfer.tokenID_2to1 <== newOrder2TokenSell;
    transfer.nonce1 <== order1AccountNonce;
    transfer.sign1 <== order1AccountSign;
    transfer.account1BalanceSell <== order1TokenSellBalance;
    transfer.account1BalanceBuy <== order1TokenBuyBalance;
    transfer.ay1 <== order1AccountAy;
    transfer.ethAddr1 <== order1AccountEthAddr;
    transfer.oldOrder1Root <== order1_updater.oldOrderRoot;
    transfer.newOrder1Root <== order1_updater.newOrderRoot;
    for (var i = 0; i < balanceLevels; i++) {
        transfer.old_account1_balance_path_elements[i][0] <== old_account1_balance_path_elements[i][0];
        transfer.tmp_account1_balance_path_elements[i][0] <== tmp_account1_balance_path_elements[i][0];
    }
    for (var i = 0; i < accountLevels; i++) {
        transfer.old_account1_path_elements[i][0] <== old_account1_path_elements[i][0];
    }
    transfer.nonce2 <== order2AccountNonce;
    transfer.sign2 <== order2AccountSign;
    transfer.account2BalanceSell <== order2TokenSellBalance;
    transfer.account2BalanceBuy <== order2TokenBuyBalance;
    transfer.ay2 <== order2AccountAy;
    transfer.ethAddr2 <== order2AccountEthAddr;
    transfer.oldOrder2Root <== order2_updater.oldOrderRoot;
    transfer.newOrder2Root <== order2_updater.newOrderRoot;
    transfer.oldAccountRoot <== old_account_root;
    transfer.newAccountRoot <== new_account_root;
    for (var i = 0; i < balanceLevels; i++) {
        transfer.old_account2_balance_path_elements[i][0] <== old_account2_balance_path_elements[i][0];
        transfer.tmp_account2_balance_path_elements[i][0] <== tmp_account2_balance_path_elements[i][0];
    }
    for (var i = 0; i < accountLevels; i++) {
        transfer.tmp_account2_path_elements[i][0] <== tmp_account2_path_elements[i][0];
    }
}

template tradeTransfer(balanceLevels, accountLevels) {
    signal input enabled;

    // Tx
    signal input accountID1;
    signal input accountID2;
    signal input amount_1to2;
    signal input amount_2to1;
    signal input tokenID_1to2;
    signal input tokenID_2to1;

    // order1 account state
    signal input nonce1;
    signal input sign1;
    signal input account1BalanceSell;
    signal input account1BalanceBuy;
    signal input ay1;
    signal input ethAddr1;
    signal input old_account1_balance_path_elements[balanceLevels][1];
    signal input tmp_account1_balance_path_elements[balanceLevels][1];
    signal input old_account1_path_elements[accountLevels][1];

    // order2 account state
    signal input nonce2;
    signal input sign2;
    signal input account2BalanceSell;
    signal input account2BalanceBuy;
    signal input ay2;
    signal input ethAddr2;
    signal input old_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_balance_path_elements[balanceLevels][1];
    signal input tmp_account2_path_elements[accountLevels][1];

    // Roots
    signal input oldOrder1Root;
    signal input oldOrder2Root;
    signal input newOrder1Root;
    signal input newOrder2Root;
    signal input oldAccountRoot;
    signal input newAccountRoot;

    signal balance_1to2_path_index[balanceLevels];
    signal balance_2to1_path_index[balanceLevels];
    signal account1_path_index[accountLevels];
    signal account2_path_index[accountLevels];

    // decode balance_path_index
    component bTokenID_1to2 = Num2BitsIfEnabled(balanceLevels);
    bTokenID_1to2.enabled <== enabled;
    bTokenID_1to2.in <== tokenID_1to2;
    for (var i = 0; i < balanceLevels; i++) {
        balance_1to2_path_index[i] <== bTokenID_1to2.out[i];
    }
    component bTokenID_2to1 = Num2BitsIfEnabled(balanceLevels);
    bTokenID_2to1.enabled <== enabled;
    bTokenID_2to1.in <== tokenID_2to1;
    for (var i = 0; i < balanceLevels; i++) {
        balance_2to1_path_index[i] <== bTokenID_2to1.out[i];
    }

    // decode account_path_index
    component bAccountID1 = Num2BitsIfEnabled(accountLevels);
    bAccountID1.enabled <== enabled;
    bAccountID1.in <== accountID1;
    for (var i = 0; i < accountLevels; i++) {
        account1_path_index[i] <== bAccountID1.out[i];
    }
    component bAccountID2 = Num2BitsIfEnabled(accountLevels);
    bAccountID2.enabled <== enabled;
    bAccountID2.in <== accountID2;
    for (var i = 0; i < accountLevels; i++) {
        account2_path_index[i] <== bAccountID2.out[i];
    }

    // TODO: underflow check

    // TODO: overflow check

    // TODO: fee

    // - balance tree
    ////////


    // we need make 4 updates to the tree here {sender,receiver}x{token1,token2}

    // Step1: check old sender state
    <%- codegen.generateBalanceCheckCircom({ctx: 'Account1Old', replacers: {
        balance: 'account1BalanceSell',
        balance_path_index: 'balance_1to2_path_index',
        balance_path_elements: 'old_account1_balance_path_elements',
        account_path_index: 'account1_path_index',
        account_path_elements: 'old_account1_path_elements',
        sign: "sign1",
        ay: 'ay1',
        nonce: 'nonce1',
        ethAddr: 'ethAddr1',
        accountRoot: 'oldAccountRoot',
        orderRoot: 'oldOrder1Root'
    }}) %>

    // Step2: update sender balance
    <%- codegen.generateSameRootCircom({ctx: 'Account1Update', replacers: {
        leaf1: 'account1BalanceSell - amount_1to2',
        path_elements1: 'old_account1_balance_path_elements',
        path_index1: 'balance_1to2_path_index',
        leaf2: 'account1BalanceBuy',
        path_elements2: 'tmp_account1_balance_path_elements',
        path_index2: 'balance_2to1_path_index',
        levels: 'balanceLevels'
    }}) %>

    // Step3: after update account1, before update account2
    <%- codegen.generateFromTpl(codegen.tpls.CalcAccountTreeFromBalanceTpl, {ctx: 'MidAccount1', replacers: {
        balance: 'account1BalanceBuy + amount_2to1',
        balance_path_index: 'balance_2to1_path_index',
        balance_path_elements: 'tmp_account1_balance_path_elements',
        account_path_index: 'account1_path_index',
        account_path_elements: 'old_account1_path_elements',
        nonce: 'nonce1',
        sign: "sign1",
        ay: 'ay1',
        ethAddr: 'ethAddr1',
        orderRoot: 'newOrder1Root'
    }}) %>
    <%- codegen.generateFromTpl(codegen.tpls.CalcAccountTreeFromBalanceTpl, {ctx: 'MidAccount2', replacers: {
        balance: 'account2BalanceSell',
        balance_path_index: 'balance_2to1_path_index',
        balance_path_elements: 'old_account2_balance_path_elements',
        account_path_index: 'account2_path_index',
        account_path_elements: 'tmp_account2_path_elements',
        nonce: 'nonce2',
        sign: "sign2",
        ay: 'ay2',
        ethAddr: 'ethAddr2',
        orderRoot: 'oldOrder2Root'
    }}) %>
    component checkMid = ForceEqualIfEnabled();
    checkMid.enabled <== enabled;
    checkMid.in[0] <== accountTreeMidAccount1.root;
    checkMid.in[1] <== accountTreeMidAccount2.root;

    // Step4: update account 2 balance
    <%- codegen.generateSameRootCircom({ctx: 'Account2Update', replacers: {
        leaf1: 'account2BalanceSell - amount_2to1',
        path_elements1: 'old_account2_balance_path_elements',
        path_index1: 'balance_2to1_path_index',
        leaf2: 'account2BalanceBuy',
        path_elements2: 'tmp_account2_balance_path_elements',
        path_index2: 'balance_1to2_path_index',
        levels: 'balanceLevels'
    }}) %>

    // Step5: check new state root
    <%- codegen.generateBalanceCheckCircom({ctx: 'Account2New', replacers: {
        balance: 'account2BalanceBuy + amount_1to2',
        balance_path_index: 'balance_1to2_path_index',
        balance_path_elements: 'tmp_account2_balance_path_elements',
        account_path_index: 'account2_path_index',
        account_path_elements: 'tmp_account2_path_elements',
        nonce: 'nonce2',
        sign: "sign2",
        ay: 'ay2',
        ethAddr: 'ethAddr2',
        accountRoot: 'newAccountRoot',
        orderRoot: 'newOrder2Root'
    }}) %>
}
